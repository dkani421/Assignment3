<!DOCTYPE html>
<html>
   <head>
      <meta charset="UTF-8">
      <title>TMA 3 Documentation</title>
      <link rel="stylesheet" href="../shared/styles.css">
   </head>
   <body>
      <hr>
      <h2>Course Information</h2>
      <p>Course Number and Name: COMP 466</p>
      <h2>Assignment Information</h2>
      <p>Assignment Number: 3A</p>
      <h2>Student Information</h2>
      <p>Name: Dawson Kaniusis</p>
      <p>Student ID Number: 3645945</p>
      <h2>Dates</h2>
      <p>Date Began Working: August 18 2023</p>
      <p>Date Completed: September 20 2023</p>
      <h2>Time Spent</h2>
      <p>Estimated Hours Spent on the Assignment: 70</p>
      <hr>
      <h1>Assignment Documentation</h1>
      <h2><a href="http://68.147.61.110/CookieTracker/">Project 3: Part 1</a></h2>
      <h3>Project Description and Requirements</h3>
      <p>
         Part 1 of this project involved creating a web application using ASP.NET in C# that utilizes a persistent cookie to track the number of times a client computer has visited the page. The application is also designed to display the IP address of the client computer and the time zone of the client's location.
      </p>
      <h3>Implementation Documentation</h3>
      <p>
         The implementation of Part 1 included the following steps:
      </p>
      <ul>
         <li>ASP.NET Application: Developed a web application using ASP.NET and C# to fulfill the project requirements.</li>
         <li>Persistent Cookie: Implemented a persistent cookie to keep track of the number of visits by the client computer.</li>
         <li>IP Address Retrieval: Utilized ASP.NET to retrieve and display the IP address of the client computer.</li>
         <li>Time Zone Display: Incorporated functionality to show the time zone of the client computer's location.</li>
      </ul>
      <h3>User Guide</h3>
      <p>
         The following user guide explains how to use the web application developed for Part 1:
      </p>
      <ol>
         <li>Access the web application using the provided link.</li>
         <li>Upon visiting the page, you will see the number of times your client computer has visited the page.</li>
         <li>The web application will also display your client computer's IP address and the time zone of your location.</li>
      </ol>
      <h3>Web Application Link</h3>
      <p>Site link: <a href="http://68.147.61.110/CookieTracker/">Part 1</a></p>
      <h3>Additional Notes</h3>
      <p>No Additional Notes</p>
      <hr>
      <h2><a href="http://68.147.61.110/Slideshow/">Project 3: Part 2</a></h2>
      <h3>Project Description and Requirements</h3>
      <p>
          Part 2 of this project involved developing a slideshow web application using ASP.NET in C#.
      </p>
      <ul>
         <li>Picture Information Storage: Information about the pictures is stored in a text file. Each picture's details will include its name and a description to be used as a caption.</li>
         <li>Caption Display: The application displays captions under each picture in the slideshow.</li>
         <li>Slideshow Controls: The application features a button to start/stop the slideshow and a control to toggle between random and sequential modes.</li>
         <li>Manual Navigation: If in sequential mode, the application will provide buttons for manual navigation to move the slideshow backward or forward.</li>
         <li>Minimum Pictures: The slideshow will consist of at least 20 high-quality pictures.</li>
      </ul>
      <h3>Implementation Documentation</h3>
      <p>
         The implementation of Part 2 involved the following steps:
      </p>
      <ul>
         <li>Front-end Development: Developed the user interface using ASP.NET and C#, ensuring the effective presentation of the slideshow and captions.</li>
         <li>Picture Storage: Implemented a mechanism to store picture utilizing a text file.</li>
         <li>Caption Integration: Integrated captions for each picture, ensuring they are displayed appropriately beneath the corresponding images.</li>
         <li>Slideshow Controls: Designed and programmed controls for starting and stopping the slideshow, as well as toggling between random and sequential modes.</li>
         <li>Manual Navigation: Added buttons for manual navigation through the slideshow in sequential mode.</li>
      </ul>
      <h3>User Guide</h3>
      <p>
         The following user guide provides instructions on using the web application developed for Part 2:
      </p>
      <ol>
         <li>Access the web application using the provided link.</li>
         <li>Upon visiting the page, you will encounter a captivating slideshow showcasing pictures with accompanying captions.</li>
         <li>Utilize the controls provided to initiate and halt the slideshow, switch between random and sequential modes, and navigate manually through the images.</li>
      </ol>
      <h3>Web Application Link</h3>
      <p>Site link: <a href="http://68.147.61.110/Slideshow/">Part 2</a></p>
      <h3>Additional Notes</h3>
      <p>No Additional Notes</p>
      <hr>
      <h2><a href="http://68.147.61.110/HardcodeComputerStore/">Project 3: Part 3</a></h2>
      <h3>Project Description and Requirements</h3>
      <p>
         Part 3 of this project marks the development of an online computer store where customers can customize computers and place orders. The application is designed using ASP.NET in C# as the server-side language.
      </p>
      <h4>Assignment Report</h4>
      <ul>
         <li>Research and Analysis: Begin by studying the design and functionalities of popular online stores and narrowed on product listings, customizations and deliverance.</li>
         <img src="./shared/1.png" alt="Image 1" style="width: 30%; height: auto;">
         <img src="./shared/2.png" alt="Image 2" style="width: 30%; height: auto;">
         <img src="./shared/3.png" alt="Image 3" style="width: 25%; height: auto;">
         <li>Design and Interface: Based on my research, I analyzed the requirements of the online store, Developed a design that features a realistic web browser-based interface. The design includes a logo, navigational menus, buttons, and essential pages such as a welcome page and contact page.</li>
         <li>Functions: We will need a computer class to store and retrieve compter info. We will also need functions to handle dynamic price and product loading. Functions such as GetComputerById(), UpdateTotalPrice(), ComponentDropDown_SelectedIndexChanged will handle the code behind.</li>
         <li>Computer Listings: The online store showcases a list of computers, along with lists of various components (RAM, hard drive, CPU, display, OS, soundcard, etc.) that customers can choose from.</li>
         <li>Customization: Customers can select a computer with its default configuration and pricing. The application will allow customers to customize the computer by changing components. The replacement will occur from a list of compatible components.</li>
         <li>Dynamic Price Update: Whenever a customer makes a change to the computer's configuration, the total price is dynamically recalculated and displayed within the online store, integrated into the page layout.</li>
         <li>Order Summary: After a customer confirms their selections, such as clicking "Buy" or "Add to Cart," a summary of the chosen components, customized configuration, and the associated pricing will be displayed in the browser window.</li>
         <li>Temporary Storage: Orders placed by customers use Cookies to store and track customer selections temporarily. Some info is dynamically passed through the url querystring.</li>
      </ul>
      <h3>Implementation Documentation</h3>
      <p>
         The implementation of Part 3 included the following steps:
      </p>
      <ul>
         <li>Design Approach: Designed an intuitive and user-friendly web interface that emulates a real online store.</li>
         <li>Component Lists: Incorporated the list of computers and component options into the HTML files.</li>
         <li>Customization Logic: Develop the logic for customer customization, ensuring compatibility and accurate pricing adjustments.</li>
         <li>Order Summary Display: Design and program the display of the order summary, featuring selected components and pricing.</li>
         <li>Cookies Usage: Utilized Cookies to temporarily store customer selections and customizations.</li>
      </ul>
      <h3>User Guide</h3>
      <p>
         The following user guide provides instructions on using the web application developed for Part 3:
      </p>
      <ol>
         <li>Access the web application using the provided link.</li>
         <li>Navigate through the online store's interface, exploring computers and component options.</li>
         <li>Select a computer with its default configuration or customize it by replacing components from the compatible list.</li>
         <li>Observe the dynamic price updates as you make changes to the computer's configuration.</li>
         <li>Upon confirmation of selections, review the order summary displaying your chosen components and pricing.</li>
         <li>Visit the contact page and leave a feedback message regarding your experiance using the system.</li>
      </ol>
      <h3>Web Application Link</h3>
      <p>Site link: <a href="http://68.147.61.110/HardcodeComputerStore/">Part 3</a></p>
      <h3>Additional Notes</h3>
      <p>No Additional Notes</p>
      <hr>
      <h2><a href="http://68.147.61.110/ComputerStore/">Project 3: Part 4</a></h2>
      <h3>Project Description and Requirements</h3>
      <p>
         Part 4 of this project extends the work accomplished in Part 3, focusing on the completion of a fully functional online computer store.
      </p>
      <img src="./shared/4.png" alt="Image 1" style="width: 30%; height: auto;">
      <img src="./shared/5.png" alt="Image 2" style="width: 27%; height: auto;">
      <ul>
         <li>Customer Management Module: Integrated a customer management module into the online computer store encompassing new customer registration, customer authentication, and password recovery functionalities.</li>
         <li>Order Management Module: Developed an order management module that enables the saving of orders for registered customers who can then manage their orders, including viewing lists and details of each item in the order, deleting or modifying selected orders.</li>
         <li>Database Design and Implementation: Designed and implemented a back-end database that supports the online computer store's functionality. The database is used to:</li>
         <ul>
            <li>Store Details: Store details of computers and components, replacing hardcoded data from part3.</li>
            <li>Customer Management: Utilize the database for customer-related data, including registration details.</li>
            <li>Order Management: Upon order submission, save order details including pricing in the database that can later be viewed/updated.</li>
         </ul>
      </ul>
      <h3>Implementation Documentation</h3>
      <p>
         The implementation of Part 4 included the following steps:
      </p>
      <ul>
         <li>Design Approach: Designed a database using SQL creation and editing for user and order management.</li>
         <li>Component Lists: Changed the hardcode approach to a SQL list of computers and component options on a database.</li>
         <li>Order/User Logic: Developed the logic for customer registration and login/logout as well as order access and customization.</li>
         <li>Order Summary Display/Update: Designed and re-programed the display of the order summary, featuring selected components and pricing.</li>
         <li>Components/Computers Re-implement: Re-implemented components/computers elements so they can be stored on db and are not hardcoded.</li>
      </ul>
      <h3>SQL Database Initialization</h3>
    <p>Below are the SQL scripts used to perform CRUD actions on the database tables. The tables were created using the phpMyAdmin DBMS:</p>
    <pre>
      <code>
         <!-- Inserting data into Computers table -->
         INSERT INTO Computers (ComputerID, ModelName, Price, Description, ImageURL)
         VALUES
            (1, 'Gaming Beast 5000', 1899, 'High-performance gaming PC with RGB lighting and liquid cooling.', 'Content/Images/image1.jpg'),
            (2, 'UltraBook Pro X', 1299, 'Sleek and powerful ultrabook for professionals.', 'Content/Images/image2.jpg'),
            (3, 'Home Entertainment Center', 899, 'Media center PC for streaming and multimedia tasks.', 'Content/Images/image3.jpg'),
            (4, 'Designer''s DreamStation', 2199, 'High-spec workstation for creative professionals.', 'Content/Images/image4.jpg'),
            (5, 'Student Special 2023', 599, 'Budget-friendly laptop for students and everyday tasks.', 'Content/Images/image5.jpg'),
            (6, 'Home Office Master', 999, 'Productive desktop setup with dual monitors and ergonomic accessories.', 'Content/Images/image6.jpg'),
            (7, 'All-in-One Touch 27', 1199, '27-inch all-in-one PC with touchscreen display for versatile computing.', 'Content/Images/image7.jpg'),
            (8, 'Mini PC Powerhouse', 799, 'Compact form factor PC with powerful components for compact spaces.', 'Content/Images/image8.jpg'),
            (9, 'Custom Enthusiast Build', 1599, 'Customizable PC build for tech enthusiasts and overclockers.', 'Content/Images/image9.jpg'),
            (10, 'Business Productivity Hub', 899, 'Efficient desktop setup for business tasks and multitasking.', 'Content/Images/image10.jpg'),
            (11, 'VR-Ready Gaming Rig', 1699, 'Built for virtual reality gaming with high-end graphics.', 'Content/Images/image11.jpg'),
            (12, 'Convertible 2-in-1', 799, 'Versatile laptop-tablet hybrid for on-the-go productivity.', 'Content/Images/image12.jpg'),
            (13, 'Creative Studio Laptop', 1399, 'Portable laptop optimized for graphic design and content creation.', 'Content/Images/image13.jpg'),
            (14, 'Everyday Performance Tower', 499, 'Affordable desktop PC for daily computing tasks.', 'Content/Images/image14.jpg'),
            (15, 'Streaming and Recording Setup', 999, 'Complete setup for content creators, including microphone and camera.', 'Content/Images/image15.jpg'),
            (16, 'Business Workhorse Laptop', 1099, 'Durable laptop with extended battery life for business professionals.', 'Content/Images/image16.jpg'),
            (17, 'Gaming Laptop Elite', 1799, 'High-performance gaming laptop with premium build and features.', 'Content/Images/image17.jpg'),
            (18, 'Portable Gaming Console', 349, 'Compact gaming console for playing on the go.', 'Content/Images/image18.jpg'),
            (19, 'Digital Artist''s Canvas', 299, 'Graphics tablet and stylus bundle for digital artists.', 'Content/Images/image19.jpg'),
            (20, 'Home Server Solution', 499, 'Network-attached storage (NAS) for centralized file storage and backup.', 'Content/Images/image20.jpg');

         <!-- Inserting data into Components table -->
         INSERT INTO components (ComponentName, Price)
         VALUES
            ('RAM - No RAM', 0),
            ('RAM - Basic', 100),
            ('RAM - Standard', 150),
            ('RAM - Advanced', 200),
            ('Hard Drive - No Hard Drive', 0),
            ('Hard Drive - Basic', 120),
            ('Hard Drive - Standard', 180),
            ('Hard Drive - Advanced', 250),
            ('CPU - No CPU', 0),
            ('CPU - Basic', 150),
            ('CPU - Standard', 250),
            ('CPU - Advanced', 350),
            ('Display - No Display', 0),
            ('Display - Basic', 200),
            ('Display - Standard', 350),
            ('Display - Advanced', 500),
            ('OS - No OS', 0),
            ('OS - Basic', 50),
            ('OS - Standard', 80),
            ('OS - Advanced', 120),
            ('Sound Card - No Sound Card', 0),
            ('Sound Card - Basic', 30),
            ('Sound Card - Standard', 50),
            ('Sound Card - Advanced', 80);
            
         <!-- Inserting sample data into Customers table -->
         INSERT INTO Customers (FirstName, LastName, Email, Username, Password)
         VALUES
            ('John', 'Doe', 'john@example.com', 'john_doe', 'hashed_and_salted_password');

         <!-- Inserting data into OrderDetails table -->
         INSERT INTO OrderDetails (OrderID, ComputerID, ComponentID, ComponentPrice)
         VALUES
            (1, 1, 2, 150); 

         <!-- Inserting data into Orders table -->
         INSERT INTO Orders (CustomerID, OrderDate, TotalPrice)
         VALUES
            (1, '2023-09-07', 500.00);

         string insertQuery = "INSERT INTO customers (FirstName, LastName, Email, Username, Password) VALUES (@FirstName, @LastName, @Email, @Username, @Password)";
         using (MySqlCommand command = new MySqlCommand(insertQuery, connection)) // Use MySqlCommand
         {
            command.Parameters.AddWithValue("@FirstName", firstName);
            command.Parameters.AddWithValue("@LastName", lastName);
            command.Parameters.AddWithValue("@Email", email);
            command.Parameters.AddWithValue("@Username", username);
            command.Parameters.AddWithValue("@Password", hashedPassword);
         }

         string query = "UPDATE customers SET Password = @Password WHERE Username = @Username";
         using (MySqlCommand command = new MySqlCommand(query, connection))
         {
            command.Parameters.AddWithValue("@Password", BCrypt.Net.BCrypt.HashPassword(newPassword));
            command.Parameters.AddWithValue("@Username", username);
            command.ExecuteNonQuery();
         }

         string query = "SELECT Password FROM customers WHERE Username = @Username";
         using (MySqlCommand command = new MySqlCommand(query, connection))
         {
            command.Parameters.AddWithValue("@Username", username);
            object result = command.ExecuteScalar();
            if (result != null)
            {
               hashedPassword = result.ToString();
            }
         }
         
         string query = "SELECT COUNT(*) FROM customers WHERE Username = @Username";
         using (MySqlCommand command = new MySqlCommand(query, connection))
         {
            string count = "";
            command.Parameters.AddWithValue("@Username", username);
            Console.WriteLine(command.ExecuteScalar());
            count = command.ExecuteScalar().ToString();
            return !(count=="0");
         }
      </code>
    </pre>
      <h3>User Guide</h3>
      <p>
         The following user guide provides instructions on using the fully functional online computer store developed for Part 4:
      </p>
      <ol>
         <li>Access the web application using the provided link.</li>
         <li>If you are a new customer, proceed with registration to create an account.</li>
         <li>Existing customers can log in using their credentials.</li>
         <li>Explore the computer listings, customize your selection, and proceed to the order confirmation step.</li>
         <li>Review the order summary, including components and pricing.</li>
         <li>Registered customers can manage their orders, view order lists, details, and make modifications or deletions.</li>
      </ol>
      <h3>Web Application Link</h3>
      <p>Site link: <a href="http://68.147.61.110/ComputerStore/">Part 4</a></p>
      <h3>Additional Notes</h3>
      <p>No Additional Notes</p>
      <hr>
   </body>
</html>